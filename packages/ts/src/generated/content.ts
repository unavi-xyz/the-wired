// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "content.proto" (package "com.wiredprotocol.content", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.wiredprotocol.content.World
 */
export interface World {
    /**
     * @generated from protobuf field: string model = 1;
     */
    model: string;
    /**
     * @generated from protobuf field: optional string host = 2;
     */
    host?: string;
    /**
     * @generated from protobuf field: optional string title = 3;
     */
    title?: string;
    /**
     * @generated from protobuf field: optional string description = 4;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional string image = 5;
     */
    image?: string;
    /**
     * @generated from protobuf field: repeated string authors = 6;
     */
    authors: string[];
}
/**
 * @generated from protobuf message com.wiredprotocol.content.Profile
 */
export interface Profile {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string bio = 2;
     */
    bio?: string;
    /**
     * @generated from protobuf field: optional string image = 3;
     */
    image?: string;
    /**
     * @generated from protobuf field: optional string background = 4;
     */
    background?: string;
    /**
     * @generated from protobuf field: repeated com.wiredprotocol.content.Profile.Link links = 5;
     */
    links: Profile_Link[];
}
/**
 * @generated from protobuf message com.wiredprotocol.content.Profile.Link
 */
export interface Profile_Link {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: optional string title = 2;
     */
    title?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class World$Type extends MessageType<World> {
    constructor() {
        super("com.wiredprotocol.content.World", [
            { no: 1, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "host", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "authors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<World>): World {
        const message = { model: "", authors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<World>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: World): World {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string model */ 1:
                    message.model = reader.string();
                    break;
                case /* optional string host */ 2:
                    message.host = reader.string();
                    break;
                case /* optional string title */ 3:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 4:
                    message.description = reader.string();
                    break;
                case /* optional string image */ 5:
                    message.image = reader.string();
                    break;
                case /* repeated string authors */ 6:
                    message.authors.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: World, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string model = 1; */
        if (message.model !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.model);
        /* optional string host = 2; */
        if (message.host !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.host);
        /* optional string title = 3; */
        if (message.title !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* optional string description = 4; */
        if (message.description !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* optional string image = 5; */
        if (message.image !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.image);
        /* repeated string authors = 6; */
        for (let i = 0; i < message.authors.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.authors[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.content.World
 */
export const World = new World$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Profile$Type extends MessageType<Profile> {
    constructor() {
        super("com.wiredprotocol.content.Profile", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bio", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "background", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "links", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Profile_Link }
        ]);
    }
    create(value?: PartialMessage<Profile>): Profile {
        const message = { links: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Profile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Profile): Profile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string bio */ 2:
                    message.bio = reader.string();
                    break;
                case /* optional string image */ 3:
                    message.image = reader.string();
                    break;
                case /* optional string background */ 4:
                    message.background = reader.string();
                    break;
                case /* repeated com.wiredprotocol.content.Profile.Link links */ 5:
                    message.links.push(Profile_Link.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Profile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string bio = 2; */
        if (message.bio !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.bio);
        /* optional string image = 3; */
        if (message.image !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.image);
        /* optional string background = 4; */
        if (message.background !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.background);
        /* repeated com.wiredprotocol.content.Profile.Link links = 5; */
        for (let i = 0; i < message.links.length; i++)
            Profile_Link.internalBinaryWrite(message.links[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.content.Profile
 */
export const Profile = new Profile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Profile_Link$Type extends MessageType<Profile_Link> {
    constructor() {
        super("com.wiredprotocol.content.Profile.Link", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Profile_Link>): Profile_Link {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Profile_Link>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Profile_Link): Profile_Link {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* optional string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Profile_Link, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* optional string title = 2; */
        if (message.title !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.content.Profile.Link
 */
export const Profile_Link = new Profile_Link$Type();
