// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "websocket/world/request.proto" (package "com.wiredprotocol.websocket.world.request", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.Join
 */
export interface Join {
    /**
     * @generated from protobuf field: string world = 1;
     */
    world: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.Leave
 */
export interface Leave {
    /**
     * @generated from protobuf field: string world = 1;
     */
    world: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.SendChatMessage
 */
export interface SendChatMessage {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.SetAvatar
 */
export interface SetAvatar {
    /**
     * @generated from protobuf field: string avatar = 1;
     */
    avatar: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.SetHandle
 */
export interface SetHandle {
    /**
     * @generated from protobuf field: string handle = 1;
     */
    handle: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.SetNickname
 */
export interface SetNickname {
    /**
     * @generated from protobuf field: string nickname = 1;
     */
    nickname: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.SetFalling
 */
export interface SetFalling {
    /**
     * @generated from protobuf field: bool falling = 1;
     */
    falling: boolean;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.request.SendEvent
 */
export interface SendEvent {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Join$Type extends MessageType<Join> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.Join", [
            { no: 1, name: "world", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Join>): Join {
        const message = { world: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Join>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Join): Join {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string world */ 1:
                    message.world = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Join, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string world = 1; */
        if (message.world !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.world);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.Join
 */
export const Join = new Join$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Leave$Type extends MessageType<Leave> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.Leave", [
            { no: 1, name: "world", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Leave>): Leave {
        const message = { world: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Leave>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Leave): Leave {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string world */ 1:
                    message.world = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Leave, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string world = 1; */
        if (message.world !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.world);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.Leave
 */
export const Leave = new Leave$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendChatMessage$Type extends MessageType<SendChatMessage> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.SendChatMessage", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendChatMessage>): SendChatMessage {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendChatMessage): SendChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.SendChatMessage
 */
export const SendChatMessage = new SendChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAvatar$Type extends MessageType<SetAvatar> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.SetAvatar", [
            { no: 1, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetAvatar>): SetAvatar {
        const message = { avatar: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAvatar): SetAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string avatar */ 1:
                    message.avatar = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string avatar = 1; */
        if (message.avatar !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.avatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.SetAvatar
 */
export const SetAvatar = new SetAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetHandle$Type extends MessageType<SetHandle> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.SetHandle", [
            { no: 1, name: "handle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetHandle>): SetHandle {
        const message = { handle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetHandle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetHandle): SetHandle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string handle */ 1:
                    message.handle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetHandle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string handle = 1; */
        if (message.handle !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.handle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.SetHandle
 */
export const SetHandle = new SetHandle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetNickname$Type extends MessageType<SetNickname> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.SetNickname", [
            { no: 1, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetNickname>): SetNickname {
        const message = { nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetNickname>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetNickname): SetNickname {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nickname */ 1:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetNickname, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nickname = 1; */
        if (message.nickname !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.SetNickname
 */
export const SetNickname = new SetNickname$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetFalling$Type extends MessageType<SetFalling> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.SetFalling", [
            { no: 1, name: "falling", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetFalling>): SetFalling {
        const message = { falling: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetFalling>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetFalling): SetFalling {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool falling */ 1:
                    message.falling = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetFalling, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool falling = 1; */
        if (message.falling !== false)
            writer.tag(1, WireType.Varint).bool(message.falling);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.SetFalling
 */
export const SetFalling = new SetFalling$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendEvent$Type extends MessageType<SendEvent> {
    constructor() {
        super("com.wiredprotocol.websocket.world.request.SendEvent", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SendEvent>): SendEvent {
        const message = { data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendEvent): SendEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.request.SendEvent
 */
export const SendEvent = new SendEvent$Type();
