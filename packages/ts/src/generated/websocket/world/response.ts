// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "websocket/world/response.proto" (package "com.wiredprotocol.websocket.world.response", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.JoinSuccess
 */
export interface JoinSuccess {
    /**
     * @generated from protobuf field: string world = 1;
     */
    world: string;
    /**
     * @generated from protobuf field: uint32 player_id = 2;
     */
    playerId: number;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.ChatMessage
 */
export interface ChatMessage {
    /**
     * @generated from protobuf field: uint32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.PlayerAvatar
 */
export interface PlayerAvatar {
    /**
     * @generated from protobuf field: uint32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: string avatar = 2;
     */
    avatar: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.PlayerHandle
 */
export interface PlayerHandle {
    /**
     * @generated from protobuf field: uint32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: string handle = 2;
     */
    handle: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.PlayerNickname
 */
export interface PlayerNickname {
    /**
     * @generated from protobuf field: uint32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.PlayerFalling
 */
export interface PlayerFalling {
    /**
     * @generated from protobuf field: uint32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: bool falling = 2;
     */
    falling: boolean;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.world.response.Event
 */
export interface Event {
    /**
     * @generated from protobuf field: uint32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class JoinSuccess$Type extends MessageType<JoinSuccess> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.JoinSuccess", [
            { no: 1, name: "world", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<JoinSuccess>): JoinSuccess {
        const message = { world: "", playerId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinSuccess): JoinSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string world */ 1:
                    message.world = reader.string();
                    break;
                case /* uint32 player_id */ 2:
                    message.playerId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string world = 1; */
        if (message.world !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.world);
        /* uint32 player_id = 2; */
        if (message.playerId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.playerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.JoinSuccess
 */
export const JoinSuccess = new JoinSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessage$Type extends MessageType<ChatMessage> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.ChatMessage", [
            { no: 1, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessage>): ChatMessage {
        const message = { playerId: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessage): ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 player_id */ 1:
                    message.playerId = reader.uint32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerId);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.ChatMessage
 */
export const ChatMessage = new ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerAvatar$Type extends MessageType<PlayerAvatar> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.PlayerAvatar", [
            { no: 1, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerAvatar>): PlayerAvatar {
        const message = { playerId: 0, avatar: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerAvatar): PlayerAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 player_id */ 1:
                    message.playerId = reader.uint32();
                    break;
                case /* string avatar */ 2:
                    message.avatar = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerId);
        /* string avatar = 2; */
        if (message.avatar !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.avatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.PlayerAvatar
 */
export const PlayerAvatar = new PlayerAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerHandle$Type extends MessageType<PlayerHandle> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.PlayerHandle", [
            { no: 1, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "handle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerHandle>): PlayerHandle {
        const message = { playerId: 0, handle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerHandle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerHandle): PlayerHandle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 player_id */ 1:
                    message.playerId = reader.uint32();
                    break;
                case /* string handle */ 2:
                    message.handle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerHandle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerId);
        /* string handle = 2; */
        if (message.handle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.handle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.PlayerHandle
 */
export const PlayerHandle = new PlayerHandle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerNickname$Type extends MessageType<PlayerNickname> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.PlayerNickname", [
            { no: 1, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerNickname>): PlayerNickname {
        const message = { playerId: 0, nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerNickname>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerNickname): PlayerNickname {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 player_id */ 1:
                    message.playerId = reader.uint32();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerNickname, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerId);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.PlayerNickname
 */
export const PlayerNickname = new PlayerNickname$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerFalling$Type extends MessageType<PlayerFalling> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.PlayerFalling", [
            { no: 1, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "falling", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerFalling>): PlayerFalling {
        const message = { playerId: 0, falling: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerFalling>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerFalling): PlayerFalling {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 player_id */ 1:
                    message.playerId = reader.uint32();
                    break;
                case /* bool falling */ 2:
                    message.falling = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerFalling, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerId);
        /* bool falling = 2; */
        if (message.falling !== false)
            writer.tag(2, WireType.Varint).bool(message.falling);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.PlayerFalling
 */
export const PlayerFalling = new PlayerFalling$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("com.wiredprotocol.websocket.world.response.Event", [
            { no: 1, name: "player_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = { playerId: 0, data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 player_id */ 1:
                    message.playerId = reader.uint32();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerId);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.world.response.Event
 */
export const Event = new Event$Type();
