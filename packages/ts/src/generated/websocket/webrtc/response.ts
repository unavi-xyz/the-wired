// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "websocket/webrtc/response.proto" (package "com.wiredprotocol.websocket.webrtc.response", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { IceCandidate } from "./signaling";
import { DtlsParameters } from "./signaling";
import { RtpCapabilities } from "./signaling";
import { SctpStreamParameters } from "./signaling";
import { RtpParameters } from "./signaling";
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.CreateConsumer
 */
export interface CreateConsumer {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: string consumer_id = 2;
     */
    consumerId: string;
    /**
     * @generated from protobuf field: string producer_id = 3;
     */
    producerId: string;
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.signaling.RtpParameters rtp_parameters = 4;
     */
    rtpParameters?: RtpParameters;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.CreateDataConsumer
 */
export interface CreateDataConsumer {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: string data_consumer_id = 2;
     */
    dataConsumerId: string;
    /**
     * @generated from protobuf field: string data_producer_id = 3;
     */
    dataProducerId: string;
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.signaling.SctpStreamParameters sctp_stream_parameters = 4;
     */
    sctpStreamParameters?: SctpStreamParameters;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.ProducerId
 */
export interface ProducerId {
    /**
     * @generated from protobuf field: string producer_id = 1;
     */
    producerId: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.DataProducerId
 */
export interface DataProducerId {
    /**
     * @generated from protobuf field: string data_producer_id = 1;
     */
    dataProducerId: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.RouterRtpCapabilities
 */
export interface RouterRtpCapabilities {
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.signaling.RtpCapabilities rtp_capabilities = 1;
     */
    rtpCapabilities?: RtpCapabilities;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated
 */
export interface TransportCreated {
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportType type = 1;
     */
    type: TransportCreated_TransportType;
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions options = 2;
     */
    options?: TransportCreated_TransportOptions;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions
 */
export interface TransportCreated_TransportOptions {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceParameters ice_parameters = 2;
     */
    iceParameters?: TransportCreated_TransportOptions_IceParameters;
    /**
     * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.signaling.DtlsParameters dtls_parameters = 3;
     */
    dtlsParameters?: DtlsParameters;
    /**
     * @generated from protobuf field: repeated com.wiredprotocol.websocket.webrtc.signaling.IceCandidate ice_candidates = 4;
     */
    iceCandidates: IceCandidate[];
    /**
     * @generated from protobuf field: optional com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.SctpParameters sctp_parameters = 5;
     */
    sctpParameters?: TransportCreated_TransportOptions_SctpParameters;
    /**
     * @generated from protobuf field: optional com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceTransportPolicy ice_transport_policy = 6;
     */
    iceTransportPolicy?: TransportCreated_TransportOptions_IceTransportPolicy;
    /**
     * @generated from protobuf field: repeated com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceServer ice_servers = 7;
     */
    iceServers: TransportCreated_TransportOptions_IceServer[];
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceParameters
 */
export interface TransportCreated_TransportOptions_IceParameters {
    /**
     * @generated from protobuf field: string username_fragment = 1;
     */
    usernameFragment: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: optional bool iceLite = 3;
     */
    iceLite?: boolean;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceServer
 */
export interface TransportCreated_TransportOptions_IceServer {
    /**
     * @generated from protobuf field: repeated string urls = 1;
     */
    urls: string[];
    /**
     * @generated from protobuf field: optional string username = 2;
     */
    username?: string;
    /**
     * @generated from protobuf field: optional string credential = 3;
     */
    credential?: string;
}
/**
 * @generated from protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.SctpParameters
 */
export interface TransportCreated_TransportOptions_SctpParameters {
    /**
     * @generated from protobuf field: int32 port = 1;
     */
    port: number;
    /**
     * @generated from protobuf field: int32 os = 2;
     */
    os: number;
    /**
     * @generated from protobuf field: int32 mis = 3;
     */
    mis: number;
    /**
     * @generated from protobuf field: int32 max_message_size = 4;
     */
    maxMessageSize: number;
}
/**
 * @generated from protobuf enum com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceTransportPolicy
 */
export enum TransportCreated_TransportOptions_IceTransportPolicy {
    /**
     * @generated from protobuf enum value: ALL = 0;
     */
    ALL = 0,
    /**
     * @generated from protobuf enum value: RELAY = 1;
     */
    RELAY = 1
}
/**
 * @generated from protobuf enum com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportType
 */
export enum TransportCreated_TransportType {
    /**
     * @generated from protobuf enum value: CONSUMER = 0;
     */
    CONSUMER = 0,
    /**
     * @generated from protobuf enum value: PRODUCER = 1;
     */
    PRODUCER = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateConsumer$Type extends MessageType<CreateConsumer> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.CreateConsumer", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "consumer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "producer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rtp_parameters", kind: "message", T: () => RtpParameters }
        ]);
    }
    create(value?: PartialMessage<CreateConsumer>): CreateConsumer {
        const message = { playerId: 0, consumerId: "", producerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateConsumer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateConsumer): CreateConsumer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* string consumer_id */ 2:
                    message.consumerId = reader.string();
                    break;
                case /* string producer_id */ 3:
                    message.producerId = reader.string();
                    break;
                case /* com.wiredprotocol.websocket.webrtc.signaling.RtpParameters rtp_parameters */ 4:
                    message.rtpParameters = RtpParameters.internalBinaryRead(reader, reader.uint32(), options, message.rtpParameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateConsumer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* string consumer_id = 2; */
        if (message.consumerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.consumerId);
        /* string producer_id = 3; */
        if (message.producerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.producerId);
        /* com.wiredprotocol.websocket.webrtc.signaling.RtpParameters rtp_parameters = 4; */
        if (message.rtpParameters)
            RtpParameters.internalBinaryWrite(message.rtpParameters, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.CreateConsumer
 */
export const CreateConsumer = new CreateConsumer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDataConsumer$Type extends MessageType<CreateDataConsumer> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.CreateDataConsumer", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data_consumer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "data_producer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sctp_stream_parameters", kind: "message", T: () => SctpStreamParameters }
        ]);
    }
    create(value?: PartialMessage<CreateDataConsumer>): CreateDataConsumer {
        const message = { playerId: 0, dataConsumerId: "", dataProducerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateDataConsumer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDataConsumer): CreateDataConsumer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* string data_consumer_id */ 2:
                    message.dataConsumerId = reader.string();
                    break;
                case /* string data_producer_id */ 3:
                    message.dataProducerId = reader.string();
                    break;
                case /* com.wiredprotocol.websocket.webrtc.signaling.SctpStreamParameters sctp_stream_parameters */ 4:
                    message.sctpStreamParameters = SctpStreamParameters.internalBinaryRead(reader, reader.uint32(), options, message.sctpStreamParameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDataConsumer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* string data_consumer_id = 2; */
        if (message.dataConsumerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dataConsumerId);
        /* string data_producer_id = 3; */
        if (message.dataProducerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dataProducerId);
        /* com.wiredprotocol.websocket.webrtc.signaling.SctpStreamParameters sctp_stream_parameters = 4; */
        if (message.sctpStreamParameters)
            SctpStreamParameters.internalBinaryWrite(message.sctpStreamParameters, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.CreateDataConsumer
 */
export const CreateDataConsumer = new CreateDataConsumer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProducerId$Type extends MessageType<ProducerId> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.ProducerId", [
            { no: 1, name: "producer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProducerId>): ProducerId {
        const message = { producerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProducerId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProducerId): ProducerId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string producer_id */ 1:
                    message.producerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProducerId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string producer_id = 1; */
        if (message.producerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.producerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.ProducerId
 */
export const ProducerId = new ProducerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataProducerId$Type extends MessageType<DataProducerId> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.DataProducerId", [
            { no: 1, name: "data_producer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DataProducerId>): DataProducerId {
        const message = { dataProducerId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataProducerId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataProducerId): DataProducerId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data_producer_id */ 1:
                    message.dataProducerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataProducerId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data_producer_id = 1; */
        if (message.dataProducerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dataProducerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.DataProducerId
 */
export const DataProducerId = new DataProducerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouterRtpCapabilities$Type extends MessageType<RouterRtpCapabilities> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.RouterRtpCapabilities", [
            { no: 1, name: "rtp_capabilities", kind: "message", T: () => RtpCapabilities }
        ]);
    }
    create(value?: PartialMessage<RouterRtpCapabilities>): RouterRtpCapabilities {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RouterRtpCapabilities>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouterRtpCapabilities): RouterRtpCapabilities {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.wiredprotocol.websocket.webrtc.signaling.RtpCapabilities rtp_capabilities */ 1:
                    message.rtpCapabilities = RtpCapabilities.internalBinaryRead(reader, reader.uint32(), options, message.rtpCapabilities);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouterRtpCapabilities, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.wiredprotocol.websocket.webrtc.signaling.RtpCapabilities rtp_capabilities = 1; */
        if (message.rtpCapabilities)
            RtpCapabilities.internalBinaryWrite(message.rtpCapabilities, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.RouterRtpCapabilities
 */
export const RouterRtpCapabilities = new RouterRtpCapabilities$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportCreated$Type extends MessageType<TransportCreated> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.TransportCreated", [
            { no: 1, name: "type", kind: "enum", T: () => ["com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportType", TransportCreated_TransportType] },
            { no: 2, name: "options", kind: "message", T: () => TransportCreated_TransportOptions }
        ]);
    }
    create(value?: PartialMessage<TransportCreated>): TransportCreated {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransportCreated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportCreated): TransportCreated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions options */ 2:
                    message.options = TransportCreated_TransportOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions options = 2; */
        if (message.options)
            TransportCreated_TransportOptions.internalBinaryWrite(message.options, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated
 */
export const TransportCreated = new TransportCreated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportCreated_TransportOptions$Type extends MessageType<TransportCreated_TransportOptions> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ice_parameters", kind: "message", T: () => TransportCreated_TransportOptions_IceParameters },
            { no: 3, name: "dtls_parameters", kind: "message", T: () => DtlsParameters },
            { no: 4, name: "ice_candidates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IceCandidate },
            { no: 5, name: "sctp_parameters", kind: "message", T: () => TransportCreated_TransportOptions_SctpParameters },
            { no: 6, name: "ice_transport_policy", kind: "enum", opt: true, T: () => ["com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceTransportPolicy", TransportCreated_TransportOptions_IceTransportPolicy] },
            { no: 7, name: "ice_servers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransportCreated_TransportOptions_IceServer }
        ]);
    }
    create(value?: PartialMessage<TransportCreated_TransportOptions>): TransportCreated_TransportOptions {
        const message = { id: "", iceCandidates: [], iceServers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransportCreated_TransportOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportCreated_TransportOptions): TransportCreated_TransportOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceParameters ice_parameters */ 2:
                    message.iceParameters = TransportCreated_TransportOptions_IceParameters.internalBinaryRead(reader, reader.uint32(), options, message.iceParameters);
                    break;
                case /* com.wiredprotocol.websocket.webrtc.signaling.DtlsParameters dtls_parameters */ 3:
                    message.dtlsParameters = DtlsParameters.internalBinaryRead(reader, reader.uint32(), options, message.dtlsParameters);
                    break;
                case /* repeated com.wiredprotocol.websocket.webrtc.signaling.IceCandidate ice_candidates */ 4:
                    message.iceCandidates.push(IceCandidate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.SctpParameters sctp_parameters */ 5:
                    message.sctpParameters = TransportCreated_TransportOptions_SctpParameters.internalBinaryRead(reader, reader.uint32(), options, message.sctpParameters);
                    break;
                case /* optional com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceTransportPolicy ice_transport_policy */ 6:
                    message.iceTransportPolicy = reader.int32();
                    break;
                case /* repeated com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceServer ice_servers */ 7:
                    message.iceServers.push(TransportCreated_TransportOptions_IceServer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportCreated_TransportOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceParameters ice_parameters = 2; */
        if (message.iceParameters)
            TransportCreated_TransportOptions_IceParameters.internalBinaryWrite(message.iceParameters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.signaling.DtlsParameters dtls_parameters = 3; */
        if (message.dtlsParameters)
            DtlsParameters.internalBinaryWrite(message.dtlsParameters, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.wiredprotocol.websocket.webrtc.signaling.IceCandidate ice_candidates = 4; */
        for (let i = 0; i < message.iceCandidates.length; i++)
            IceCandidate.internalBinaryWrite(message.iceCandidates[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.SctpParameters sctp_parameters = 5; */
        if (message.sctpParameters)
            TransportCreated_TransportOptions_SctpParameters.internalBinaryWrite(message.sctpParameters, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceTransportPolicy ice_transport_policy = 6; */
        if (message.iceTransportPolicy !== undefined)
            writer.tag(6, WireType.Varint).int32(message.iceTransportPolicy);
        /* repeated com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceServer ice_servers = 7; */
        for (let i = 0; i < message.iceServers.length; i++)
            TransportCreated_TransportOptions_IceServer.internalBinaryWrite(message.iceServers[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions
 */
export const TransportCreated_TransportOptions = new TransportCreated_TransportOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportCreated_TransportOptions_IceParameters$Type extends MessageType<TransportCreated_TransportOptions_IceParameters> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceParameters", [
            { no: 1, name: "username_fragment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "iceLite", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TransportCreated_TransportOptions_IceParameters>): TransportCreated_TransportOptions_IceParameters {
        const message = { usernameFragment: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransportCreated_TransportOptions_IceParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportCreated_TransportOptions_IceParameters): TransportCreated_TransportOptions_IceParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username_fragment */ 1:
                    message.usernameFragment = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* optional bool iceLite */ 3:
                    message.iceLite = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportCreated_TransportOptions_IceParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username_fragment = 1; */
        if (message.usernameFragment !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.usernameFragment);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* optional bool iceLite = 3; */
        if (message.iceLite !== undefined)
            writer.tag(3, WireType.Varint).bool(message.iceLite);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceParameters
 */
export const TransportCreated_TransportOptions_IceParameters = new TransportCreated_TransportOptions_IceParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportCreated_TransportOptions_IceServer$Type extends MessageType<TransportCreated_TransportOptions_IceServer> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceServer", [
            { no: 1, name: "urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "credential", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransportCreated_TransportOptions_IceServer>): TransportCreated_TransportOptions_IceServer {
        const message = { urls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransportCreated_TransportOptions_IceServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportCreated_TransportOptions_IceServer): TransportCreated_TransportOptions_IceServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string urls */ 1:
                    message.urls.push(reader.string());
                    break;
                case /* optional string username */ 2:
                    message.username = reader.string();
                    break;
                case /* optional string credential */ 3:
                    message.credential = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportCreated_TransportOptions_IceServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string urls = 1; */
        for (let i = 0; i < message.urls.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urls[i]);
        /* optional string username = 2; */
        if (message.username !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* optional string credential = 3; */
        if (message.credential !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.credential);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.IceServer
 */
export const TransportCreated_TransportOptions_IceServer = new TransportCreated_TransportOptions_IceServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransportCreated_TransportOptions_SctpParameters$Type extends MessageType<TransportCreated_TransportOptions_SctpParameters> {
    constructor() {
        super("com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.SctpParameters", [
            { no: 1, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "os", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "mis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "max_message_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TransportCreated_TransportOptions_SctpParameters>): TransportCreated_TransportOptions_SctpParameters {
        const message = { port: 0, os: 0, mis: 0, maxMessageSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TransportCreated_TransportOptions_SctpParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransportCreated_TransportOptions_SctpParameters): TransportCreated_TransportOptions_SctpParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 port */ 1:
                    message.port = reader.int32();
                    break;
                case /* int32 os */ 2:
                    message.os = reader.int32();
                    break;
                case /* int32 mis */ 3:
                    message.mis = reader.int32();
                    break;
                case /* int32 max_message_size */ 4:
                    message.maxMessageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransportCreated_TransportOptions_SctpParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 port = 1; */
        if (message.port !== 0)
            writer.tag(1, WireType.Varint).int32(message.port);
        /* int32 os = 2; */
        if (message.os !== 0)
            writer.tag(2, WireType.Varint).int32(message.os);
        /* int32 mis = 3; */
        if (message.mis !== 0)
            writer.tag(3, WireType.Varint).int32(message.mis);
        /* int32 max_message_size = 4; */
        if (message.maxMessageSize !== 0)
            writer.tag(4, WireType.Varint).int32(message.maxMessageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.webrtc.response.TransportCreated.TransportOptions.SctpParameters
 */
export const TransportCreated_TransportOptions_SctpParameters = new TransportCreated_TransportOptions_SctpParameters$Type();
