// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "websocket/request.proto" (package "com.wiredprotocol.websocket.request", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SendEvent } from "./world/request";
import { SetPlayerData } from "./world/request";
import { SendChatMessage } from "./world/request";
import { Leave } from "./world/request";
import { Join } from "./world/request";
import { ProduceData } from "./webrtc/request";
import { Produce } from "./webrtc/request";
import { SetRtpCapabilities } from "./webrtc/request";
import { GetRouterRtpCapabilities } from "./webrtc/request";
import { CreateTransport } from "./webrtc/request";
import { ConnectTransport } from "./webrtc/request";
import { PauseAudio } from "./webrtc/request";
/**
 * @generated from protobuf message com.wiredprotocol.websocket.request.Request
 */
export interface Request {
    /**
     * @generated from protobuf oneof: message
     */
    message: {
        oneofKind: "pauseAudio";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.PauseAudio pause_audio = 1;
         */
        pauseAudio: PauseAudio;
    } | {
        oneofKind: "connectTransport";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.ConnectTransport connect_transport = 2;
         */
        connectTransport: ConnectTransport;
    } | {
        oneofKind: "createTransport";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.CreateTransport create_transport = 3;
         */
        createTransport: CreateTransport;
    } | {
        oneofKind: "getRouterRtpCapabilities";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.GetRouterRtpCapabilities get_router_rtp_capabilities = 4;
         */
        getRouterRtpCapabilities: GetRouterRtpCapabilities;
    } | {
        oneofKind: "setRtpCapabilities";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.SetRtpCapabilities set_rtp_capabilities = 5;
         */
        setRtpCapabilities: SetRtpCapabilities;
    } | {
        oneofKind: "produce";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.Produce produce = 6;
         */
        produce: Produce;
    } | {
        oneofKind: "produceData";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.request.ProduceData produce_data = 7;
         */
        produceData: ProduceData;
    } | {
        oneofKind: "join";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.request.Join join = 8;
         */
        join: Join;
    } | {
        oneofKind: "leave";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.request.Leave leave = 9;
         */
        leave: Leave;
    } | {
        oneofKind: "sendChatMessage";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.request.SendChatMessage send_chat_message = 10;
         */
        sendChatMessage: SendChatMessage;
    } | {
        oneofKind: "setPlayerData";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.request.SetPlayerData set_player_data = 11;
         */
        setPlayerData: SetPlayerData;
    } | {
        oneofKind: "sendEvent";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.request.SendEvent send_event = 12;
         */
        sendEvent: SendEvent;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("com.wiredprotocol.websocket.request.Request", [
            { no: 1, name: "pause_audio", kind: "message", oneof: "message", T: () => PauseAudio },
            { no: 2, name: "connect_transport", kind: "message", oneof: "message", T: () => ConnectTransport },
            { no: 3, name: "create_transport", kind: "message", oneof: "message", T: () => CreateTransport },
            { no: 4, name: "get_router_rtp_capabilities", kind: "message", oneof: "message", T: () => GetRouterRtpCapabilities },
            { no: 5, name: "set_rtp_capabilities", kind: "message", oneof: "message", T: () => SetRtpCapabilities },
            { no: 6, name: "produce", kind: "message", oneof: "message", T: () => Produce },
            { no: 7, name: "produce_data", kind: "message", oneof: "message", T: () => ProduceData },
            { no: 8, name: "join", kind: "message", oneof: "message", T: () => Join },
            { no: 9, name: "leave", kind: "message", oneof: "message", T: () => Leave },
            { no: 10, name: "send_chat_message", kind: "message", oneof: "message", T: () => SendChatMessage },
            { no: 11, name: "set_player_data", kind: "message", oneof: "message", T: () => SetPlayerData },
            { no: 12, name: "send_event", kind: "message", oneof: "message", T: () => SendEvent }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { message: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.wiredprotocol.websocket.webrtc.request.PauseAudio pause_audio */ 1:
                    message.message = {
                        oneofKind: "pauseAudio",
                        pauseAudio: PauseAudio.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).pauseAudio)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.request.ConnectTransport connect_transport */ 2:
                    message.message = {
                        oneofKind: "connectTransport",
                        connectTransport: ConnectTransport.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).connectTransport)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.request.CreateTransport create_transport */ 3:
                    message.message = {
                        oneofKind: "createTransport",
                        createTransport: CreateTransport.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).createTransport)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.request.GetRouterRtpCapabilities get_router_rtp_capabilities */ 4:
                    message.message = {
                        oneofKind: "getRouterRtpCapabilities",
                        getRouterRtpCapabilities: GetRouterRtpCapabilities.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).getRouterRtpCapabilities)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.request.SetRtpCapabilities set_rtp_capabilities */ 5:
                    message.message = {
                        oneofKind: "setRtpCapabilities",
                        setRtpCapabilities: SetRtpCapabilities.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).setRtpCapabilities)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.request.Produce produce */ 6:
                    message.message = {
                        oneofKind: "produce",
                        produce: Produce.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).produce)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.request.ProduceData produce_data */ 7:
                    message.message = {
                        oneofKind: "produceData",
                        produceData: ProduceData.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).produceData)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.request.Join join */ 8:
                    message.message = {
                        oneofKind: "join",
                        join: Join.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).join)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.request.Leave leave */ 9:
                    message.message = {
                        oneofKind: "leave",
                        leave: Leave.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).leave)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.request.SendChatMessage send_chat_message */ 10:
                    message.message = {
                        oneofKind: "sendChatMessage",
                        sendChatMessage: SendChatMessage.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).sendChatMessage)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.request.SetPlayerData set_player_data */ 11:
                    message.message = {
                        oneofKind: "setPlayerData",
                        setPlayerData: SetPlayerData.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).setPlayerData)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.request.SendEvent send_event */ 12:
                    message.message = {
                        oneofKind: "sendEvent",
                        sendEvent: SendEvent.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).sendEvent)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.wiredprotocol.websocket.webrtc.request.PauseAudio pause_audio = 1; */
        if (message.message.oneofKind === "pauseAudio")
            PauseAudio.internalBinaryWrite(message.message.pauseAudio, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.request.ConnectTransport connect_transport = 2; */
        if (message.message.oneofKind === "connectTransport")
            ConnectTransport.internalBinaryWrite(message.message.connectTransport, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.request.CreateTransport create_transport = 3; */
        if (message.message.oneofKind === "createTransport")
            CreateTransport.internalBinaryWrite(message.message.createTransport, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.request.GetRouterRtpCapabilities get_router_rtp_capabilities = 4; */
        if (message.message.oneofKind === "getRouterRtpCapabilities")
            GetRouterRtpCapabilities.internalBinaryWrite(message.message.getRouterRtpCapabilities, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.request.SetRtpCapabilities set_rtp_capabilities = 5; */
        if (message.message.oneofKind === "setRtpCapabilities")
            SetRtpCapabilities.internalBinaryWrite(message.message.setRtpCapabilities, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.request.Produce produce = 6; */
        if (message.message.oneofKind === "produce")
            Produce.internalBinaryWrite(message.message.produce, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.request.ProduceData produce_data = 7; */
        if (message.message.oneofKind === "produceData")
            ProduceData.internalBinaryWrite(message.message.produceData, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.request.Join join = 8; */
        if (message.message.oneofKind === "join")
            Join.internalBinaryWrite(message.message.join, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.request.Leave leave = 9; */
        if (message.message.oneofKind === "leave")
            Leave.internalBinaryWrite(message.message.leave, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.request.SendChatMessage send_chat_message = 10; */
        if (message.message.oneofKind === "sendChatMessage")
            SendChatMessage.internalBinaryWrite(message.message.sendChatMessage, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.request.SetPlayerData set_player_data = 11; */
        if (message.message.oneofKind === "setPlayerData")
            SetPlayerData.internalBinaryWrite(message.message.setPlayerData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.request.SendEvent send_event = 12; */
        if (message.message.oneofKind === "sendEvent")
            SendEvent.internalBinaryWrite(message.message.sendEvent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.request.Request
 */
export const Request = new Request$Type();
