// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "websocket/response.proto" (package "com.wiredprotocol.websocket.response", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Event } from "./world/response";
import { PlayerData } from "./world/response";
import { PlayerLeft } from "./world/response";
import { PlayerJoined } from "./world/response";
import { ChatMessage } from "./world/response";
import { JoinSuccess } from "./world/response";
import { TransportConnected } from "./webrtc/response";
import { TransportCreated } from "./webrtc/response";
import { RouterRtpCapabilities } from "./webrtc/response";
import { DataProducerId } from "./webrtc/response";
import { ProducerId } from "./webrtc/response";
import { CreateDataConsumer } from "./webrtc/response";
import { CreateConsumer } from "./webrtc/response";
/**
 * @generated from protobuf message com.wiredprotocol.websocket.response.Response
 */
export interface Response {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "createConsumer";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.CreateConsumer create_consumer = 1;
         */
        createConsumer: CreateConsumer;
    } | {
        oneofKind: "createDataConsumer";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.CreateDataConsumer create_data_consumer = 2;
         */
        createDataConsumer: CreateDataConsumer;
    } | {
        oneofKind: "producerId";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.ProducerId producer_id = 3;
         */
        producerId: ProducerId;
    } | {
        oneofKind: "dataProducerId";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.DataProducerId data_producer_id = 4;
         */
        dataProducerId: DataProducerId;
    } | {
        oneofKind: "routerRtpCapabilities";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.RouterRtpCapabilities router_rtp_capabilities = 5;
         */
        routerRtpCapabilities: RouterRtpCapabilities;
    } | {
        oneofKind: "transportCreated";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.TransportCreated transport_created = 6;
         */
        transportCreated: TransportCreated;
    } | {
        oneofKind: "transportConnected";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.webrtc.response.TransportConnected transport_connected = 13;
         */
        transportConnected: TransportConnected;
    } | {
        oneofKind: "joinSuccess";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.response.JoinSuccess join_success = 7;
         */
        joinSuccess: JoinSuccess;
    } | {
        oneofKind: "chatMessage";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.response.ChatMessage chat_message = 8;
         */
        chatMessage: ChatMessage;
    } | {
        oneofKind: "playerJoined";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.response.PlayerJoined player_joined = 9;
         */
        playerJoined: PlayerJoined;
    } | {
        oneofKind: "playerLeft";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.response.PlayerLeft player_left = 10;
         */
        playerLeft: PlayerLeft;
    } | {
        oneofKind: "playerData";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.response.PlayerData player_data = 11;
         */
        playerData: PlayerData;
    } | {
        oneofKind: "event";
        /**
         * @generated from protobuf field: com.wiredprotocol.websocket.world.response.Event event = 12;
         */
        event: Event;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("com.wiredprotocol.websocket.response.Response", [
            { no: 1, name: "create_consumer", kind: "message", oneof: "response", T: () => CreateConsumer },
            { no: 2, name: "create_data_consumer", kind: "message", oneof: "response", T: () => CreateDataConsumer },
            { no: 3, name: "producer_id", kind: "message", oneof: "response", T: () => ProducerId },
            { no: 4, name: "data_producer_id", kind: "message", oneof: "response", T: () => DataProducerId },
            { no: 5, name: "router_rtp_capabilities", kind: "message", oneof: "response", T: () => RouterRtpCapabilities },
            { no: 6, name: "transport_created", kind: "message", oneof: "response", T: () => TransportCreated },
            { no: 13, name: "transport_connected", kind: "message", oneof: "response", T: () => TransportConnected },
            { no: 7, name: "join_success", kind: "message", oneof: "response", T: () => JoinSuccess },
            { no: 8, name: "chat_message", kind: "message", oneof: "response", T: () => ChatMessage },
            { no: 9, name: "player_joined", kind: "message", oneof: "response", T: () => PlayerJoined },
            { no: 10, name: "player_left", kind: "message", oneof: "response", T: () => PlayerLeft },
            { no: 11, name: "player_data", kind: "message", oneof: "response", T: () => PlayerData },
            { no: 12, name: "event", kind: "message", oneof: "response", T: () => Event }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.wiredprotocol.websocket.webrtc.response.CreateConsumer create_consumer */ 1:
                    message.response = {
                        oneofKind: "createConsumer",
                        createConsumer: CreateConsumer.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).createConsumer)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.CreateDataConsumer create_data_consumer */ 2:
                    message.response = {
                        oneofKind: "createDataConsumer",
                        createDataConsumer: CreateDataConsumer.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).createDataConsumer)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.ProducerId producer_id */ 3:
                    message.response = {
                        oneofKind: "producerId",
                        producerId: ProducerId.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).producerId)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.DataProducerId data_producer_id */ 4:
                    message.response = {
                        oneofKind: "dataProducerId",
                        dataProducerId: DataProducerId.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).dataProducerId)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.RouterRtpCapabilities router_rtp_capabilities */ 5:
                    message.response = {
                        oneofKind: "routerRtpCapabilities",
                        routerRtpCapabilities: RouterRtpCapabilities.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).routerRtpCapabilities)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.TransportCreated transport_created */ 6:
                    message.response = {
                        oneofKind: "transportCreated",
                        transportCreated: TransportCreated.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).transportCreated)
                    };
                    break;
                case /* com.wiredprotocol.websocket.webrtc.response.TransportConnected transport_connected */ 13:
                    message.response = {
                        oneofKind: "transportConnected",
                        transportConnected: TransportConnected.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).transportConnected)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.response.JoinSuccess join_success */ 7:
                    message.response = {
                        oneofKind: "joinSuccess",
                        joinSuccess: JoinSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).joinSuccess)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.response.ChatMessage chat_message */ 8:
                    message.response = {
                        oneofKind: "chatMessage",
                        chatMessage: ChatMessage.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).chatMessage)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.response.PlayerJoined player_joined */ 9:
                    message.response = {
                        oneofKind: "playerJoined",
                        playerJoined: PlayerJoined.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).playerJoined)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.response.PlayerLeft player_left */ 10:
                    message.response = {
                        oneofKind: "playerLeft",
                        playerLeft: PlayerLeft.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).playerLeft)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.response.PlayerData player_data */ 11:
                    message.response = {
                        oneofKind: "playerData",
                        playerData: PlayerData.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).playerData)
                    };
                    break;
                case /* com.wiredprotocol.websocket.world.response.Event event */ 12:
                    message.response = {
                        oneofKind: "event",
                        event: Event.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).event)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.wiredprotocol.websocket.webrtc.response.CreateConsumer create_consumer = 1; */
        if (message.response.oneofKind === "createConsumer")
            CreateConsumer.internalBinaryWrite(message.response.createConsumer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.response.CreateDataConsumer create_data_consumer = 2; */
        if (message.response.oneofKind === "createDataConsumer")
            CreateDataConsumer.internalBinaryWrite(message.response.createDataConsumer, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.response.ProducerId producer_id = 3; */
        if (message.response.oneofKind === "producerId")
            ProducerId.internalBinaryWrite(message.response.producerId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.response.DataProducerId data_producer_id = 4; */
        if (message.response.oneofKind === "dataProducerId")
            DataProducerId.internalBinaryWrite(message.response.dataProducerId, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.response.RouterRtpCapabilities router_rtp_capabilities = 5; */
        if (message.response.oneofKind === "routerRtpCapabilities")
            RouterRtpCapabilities.internalBinaryWrite(message.response.routerRtpCapabilities, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.response.TransportCreated transport_created = 6; */
        if (message.response.oneofKind === "transportCreated")
            TransportCreated.internalBinaryWrite(message.response.transportCreated, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.webrtc.response.TransportConnected transport_connected = 13; */
        if (message.response.oneofKind === "transportConnected")
            TransportConnected.internalBinaryWrite(message.response.transportConnected, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.response.JoinSuccess join_success = 7; */
        if (message.response.oneofKind === "joinSuccess")
            JoinSuccess.internalBinaryWrite(message.response.joinSuccess, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.response.ChatMessage chat_message = 8; */
        if (message.response.oneofKind === "chatMessage")
            ChatMessage.internalBinaryWrite(message.response.chatMessage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.response.PlayerJoined player_joined = 9; */
        if (message.response.oneofKind === "playerJoined")
            PlayerJoined.internalBinaryWrite(message.response.playerJoined, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.response.PlayerLeft player_left = 10; */
        if (message.response.oneofKind === "playerLeft")
            PlayerLeft.internalBinaryWrite(message.response.playerLeft, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.response.PlayerData player_data = 11; */
        if (message.response.oneofKind === "playerData")
            PlayerData.internalBinaryWrite(message.response.playerData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* com.wiredprotocol.websocket.world.response.Event event = 12; */
        if (message.response.oneofKind === "event")
            Event.internalBinaryWrite(message.response.event, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.wiredprotocol.websocket.response.Response
 */
export const Response = new Response$Type();
