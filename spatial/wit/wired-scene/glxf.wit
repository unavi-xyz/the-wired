interface glxf {
  use gltf.{gltf};
  use node.{node};

  // Returns the root glXF that the script is attached to.
  get-root: func() -> glxf;

  // A glXF document.
  // Used to compose multiple independent glTF assets together.
  resource glxf {
    constructor();

    list-assets: func() -> list<asset>;
    add-asset: func(value: asset);
    remove-asset: func(value: asset);

    list-nodes: func() -> list<glxf-node>;
    add-node: func(value: borrow<glxf-node>);
    remove-node: func(value: borrow<glxf-node>);
  }

  variant asset {
    gltf(asset-gltf),
    glxf(asset-glxf),
  }

  resource asset-gltf {
    constructor(document: borrow<gltf>);

    document: func() -> gltf;

    list-nodes: func() -> list<node>;
    add-node: func(value: borrow<node>);
    remove-node: func(value: borrow<node>);
  }

  resource asset-glxf {
    constructor(document: borrow<glxf>);

    document: func() -> glxf;

    list-nodes: func() -> list<glxf-node>;
    add-node: func(value: borrow<glxf-node>);
    remove-node: func(value: borrow<glxf-node>);
  }

  resource glxf-node {
    constructor();

    id: func() -> u32;

    name: func() -> string;
    set-name: func(value: string);

    parent: func() -> option<glxf-node>;

    children: func() -> children;
    set-children: func(value: children);
  }

  variant children {
    asset(asset),
    nodes(list<glxf-node>),
  }
}
