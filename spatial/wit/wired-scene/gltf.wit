interface gltf {
  use material.{material};
  use mesh.{mesh};
  use node.{node};
  use scene.{scene};

  // A glTF document.
  // Can be saved or loaded independently of the rest of the world.
  resource gltf {
    constructor();

    list-materials: func() -> list<material>;
    add-material: func(value: borrow<material>);
    remove-material: func(value: borrow<material>);

    list-meshes: func() -> list<mesh>;
    add-mesh: func(value: borrow<mesh>);
    remove-mesh: func(value: borrow<mesh>);

    list-nodes: func() -> list<node>;
    add-node: func(value: borrow<node>);
    remove-node: func(value: borrow<node>);

    list-scenes: func() -> list<scene>;
    add-scene: func(value: borrow<scene>);
    remove-scene: func(value: borrow<scene>);

    // The currently loaded scene.
    active-scene: func() -> option<scene>;
    set-active-scene: func(value: option<borrow<scene>>);

    // The default active scene, used when an asset is first loaded.
    // If not explicitly set, the first scene will be used.
    default-scene: func() -> option<scene>;
    set-default-scene: func(value: borrow<scene>);
  }
}

interface material {
  record color {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
  }

  resource material {
    constructor();

    id: func() -> u32;
    // Returns another reference to the same resource.
    ref: func() -> material;

    name: func() -> string;
    set-name: func(value: string);

    color: func() -> color;
    set-color: func(value: color);
  }
}

interface mesh {
  use material.{material};

  resource primitive {
    id: func() -> u32;

    material: func() -> option<material>;
    set-material: func(value: option<borrow<material>>);

    set-indices: func(value: list<u32>);
    set-normals: func(value: list<f32>);
    set-positions: func(value: list<f32>);
    set-uvs: func(value: list<f32>);
  }

  resource mesh {
    constructor();

    id: func() -> u32;
    // Returns another reference to the same resource.
    ref: func() -> mesh;

    name: func() -> string;
    set-name: func(value: string);

    list-primitives: func() -> list<primitive>;
    create-primitive: func() -> primitive;
    remove-primitive: func(value: primitive);
  }
}

interface node {
  use mesh.{mesh};
  use wired:input/handler.{input-handler};
  use wired:math/types.{transform};
  use wired:physics/types.{collider, rigid-body};

  resource node {
    constructor();

    id: func() -> u32;
    // Returns another reference to the same resource.
    ref: func() -> node;

    name: func() -> string;
    set-name: func(value: string);

    children: func() -> list<node>;
    add-child: func(value: borrow<node>);
    remove-child: func(value: borrow<node>);

    parent: func() -> option<node>;

    transform: func() -> transform;
    set-transform: func(value: transform);

    mesh: func() -> option<mesh>;
    set-mesh: func(value: option<borrow<mesh>>);

    collider: func() -> option<collider>;
    set-collider: func(value: option<borrow<collider>>);

    rigid-body: func() -> option<rigid-body>;
    set-rigid-body: func(value: option<borrow<rigid-body>>);

    input-handler: func() -> option<input-handler>;
    set-input-handler: func(value: option<borrow<input-handler>>);
  }
}

interface scene {
  use node.{node};

  resource scene {
    constructor();

    id: func() -> u32;

    name: func() -> string;
    set-name: func(value: string);

    nodes: func() -> list<node>;
    add-node: func(value: borrow<node>);
    remove-node: func(value: borrow<node>);
  }
}
