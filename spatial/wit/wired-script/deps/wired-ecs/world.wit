package wired:ecs;

world host {
  import types;
}

interface types {
  resource component-instance {}

  resource component {
    new: func() -> component-instance;
  }

  resource entity {
    insert: func(component: component-instance);
  }

  resource query {
    read: func() -> list<tuple<entity, list<component-instance>>>;
  }

  resource ecs-world {
    register-component: func() -> component;
    register-query: func(components: list<borrow<component>>) -> query;
    spawn: func(components: list<component-instance>) -> entity;
  }
}
