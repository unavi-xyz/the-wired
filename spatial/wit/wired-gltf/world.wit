package wired:gltf;

world lib {
  export material;
  export mesh;
  export node;
}

world host {
  import material;
  import mesh;
  import node;
}

interface material {
  record color {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
  }

  /// A reference to a material.
  resource material {
    id: func() -> u32;

    color: func() -> color;
    set-color: func(value: color);
  }

  list-materials: func() -> list<material>;
  create-material: func() -> material;
  remove-material: func(value: material);
}

interface mesh {
  use material.{material};

  /// A reference to a primitive.
  resource primitive {
    id: func() -> u32;

    material: func() -> option<material>;
    set-material: func(value: option<borrow<material>>);

    set-indices: func(value: list<u32>);
    set-normals: func(value: list<f32>);
    set-positions: func(value: list<f32>);
    set-uvs: func(value: list<f32>);
  }

  /// A reference to a mesh.
  resource mesh {
    id: func() -> u32;

    name: func() -> string;
    set-name: func(value: string);

    list-primitives: func() -> list<primitive>;
    create-primitive: func() -> primitive;
    remove-primitive: func(value: primitive);
  }

  list-meshes: func() -> list<mesh>;
  create-mesh: func() -> mesh;
  remove-mesh: func(value: mesh);
}

interface node {
  use mesh.{mesh};
  use wired:math/types.{vec3, quat};

  record transform {
    translation: vec3,
    rotation: quat,
    scale: vec3,
  }

  /// A reference to a node.
  resource node {
    id: func() -> u32;

    name: func() -> string;
    set-name: func(value: string);

    children: func() -> list<node>;
    add-child: func(value: borrow<node>);
    remove-child: func(value: borrow<node>);

    parent: func() -> option<node>;

    transform: func() -> transform;
    set-transform: func(value: transform);

    mesh: func() -> option<mesh>;
    set-mesh: func(value: option<borrow<mesh>>);
  }

  list-nodes: func() -> list<node>;
  create-node: func() -> node;
  remove-node: func(value: node);
}
